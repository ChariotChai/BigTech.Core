使用 C# 设计 ECS 系统框架，除了基础的 ECS 系统，还要支持以下功能：
1、能够描述 component 之间 多对多的关系，即 component A 绑定的
2、能够被外部通过 API 调用，类似调用 OOP 的对象方法，可能会同时影响到很多个 entity 及其各种 component
3、一套内部事件机制，某个 Entity 的 component 实例变化时，会自动触发这个 component 上绑定的所有 handler
4、API 调用完成后，能够采集到这次 API 调用过程中所有发生变化的 entity 的component
5、API 调用支持事务，即能够回滚
6、支持序列化与反序列化


基于上述框架，增加流程引擎功能：
1、流程由若干节点构成。每种类型的节点有自己的 context 和 回调函数。
2、流程的编排仅需要支持线性结构和分支逻辑结构。
3、某些类型的节点需要等待用户输入回调，遇到这种情况，整个流程需要阻塞在这个节点直到用户回调。


我想设计一个回合制策略游戏的 AI 玩家系统，满足以下需求：
1、我已经提供了游戏的状态描述，形式是若干张表，表的列值都是字符串、整数或者浮点数。表与表之间可能存在外键。AI 系统需要将状态转换为 AI 规划模型的输入（如张量模型等形式）。
2、对于一个确定的状态空间，可以计算得到操作空间。操作空间是由一组可执行的操作组成的一维向量。
3、AI 玩家需要在回合开始时，计算计算操作空间，


最小AI闭环：
- 2个玩家
- 每个玩家 3 个 hero
- 每个 hero 有 HP、ATK、DEF 三个属性及其对应的最大值
- hero 有6个技能，每个技能可以升级（需要消耗金钱），技能会影响上述属性
- 玩家每回合开始会随机获得一定量的金钱，
- 


为我设计一个系统的一套UI界面：我要开发一个监管报送系统，向相关的监管方定时或按需发送一定格式的监管报告。
1、用户可以选择或创建一个监管报送业务。每个监管报送业务都有一个类似BPMN的业务流程，该流程会按照一定周期或者被用户人工触发。
2、每个监管报送业务，有一套“schema”定义，描述了需要报送的内容格式，类似于 JSON Schema。
3、这个业务流程会有若干个节点，某些节点是自动执行的，某些节点需要用户输入，某些节点需要等待外部系统的输入。等待的节点会有超时设置，超时后会自动执行某个默认的操作。
4、有一个特殊的节点是“业务数据采集”，需要用户写一系列 SQL ，最终输出为若干张表格，这些表格需要复合这个监管报送业务的 schema 定义。
5、有一个特殊的节点是“数据查看”，在业务流程执行完成业务数据采集后，会将所有数据加载到若干个电子表格中。用户进入这个节点，可以查看本次运行结果中的所有数据结果。
6、每个监管报送业务，都需要一个地方能够查看历史执行记录，查看每次执行的结果和日志。
7、每个监管报送业务，都需要一个地方能够查看当前的执行状态，查看当前流程在哪个节点，等待什么输入等。
8、每个监管报送业务，都需要一个地方能够查看当前的配置参数，修改配置参数后可以保存到当前业务流程中。
9、每个监管报送业务，都需要一个地方能够查看当前的报送结果，查看报送的内容和状态等信息。
10、每个监管报送业务，都需要一个地方能够查看历史执行记录的 insight，分析历史执行记录中的数据和日志，提供一些统计信息和趋势分析等功能。
